// --- Redux documentation --- //

1. View - это наш шаблон который отображает наши данные;

2. Action - это JS обьект который должен содержать обязаетльное поле type: 'с призывом к действию - "константа действия"';

3. Чтобы изменить состояние в redux нужно использовать dispatch который отправляет данные в reducer (напрямую данные изменять нельзя - принцип иммутабельности)

4. Reducer - это чистая JS function без side эффектов которая принимает в себе store и изменённые данные которые приходят из dispatch и через switch case мы сверяем тип action.
Reducer - всегда возвращает нам изменённый store.

5. После того как store был изменён, данные отправляются на view, новые данные получают только те компоненты которые подписаны на слушатель ( изменения store, завязаны с connect function )

HOC (Hight Order Component) - функция висшего порядка которая оборачивает наш компонент и получает данные на прямую из store и все эти данные получают все компоненты которые подписаны на слушатель ( изменения ) и после этого мы можем видеть изменённые данные на view.



middleWares - это "прослойка" между reducer and store, он может принимать в себя какие-то данные и что-то делать с ними до того как эти данные попадут из reducer в store.

combineReducers - это функция которая объединяет все наши reducers в один большой

compose - это функция которая позволяет нам добавлять разные middleWares и сторонние расширения.

reducers = {} - параметры которые мы можем передавать в наш configureStore

preloadedState = {} - опциональный (необязательный) параметр который будет как initial State для приложения

connect ( HOC - Hight Order Component ) - компонент высшего порядка, который имеет какую-то логику внутри и принимает на вход другой компонент, делает что-то с данными и передаёт эти данные компоненту которые он принял. Имеет 4 параметра: 
  1. mapStateToProps? - получает данные из redux store и передаёт их в компонент
  2. mapDispatchToProps? - вызывает action creators которые нужно задиспатчить
  3. mergedProps?
  4. options?
  

!!! useEffect - заменяет 3 метода жизненного цикла из классовых компонентов ( componentDidMount(), componentDidUpdate(), componentWillUnmount() );


